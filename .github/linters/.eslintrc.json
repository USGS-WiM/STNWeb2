{
    "root": true,
    "overrides": [
        /**
         * -----------------------------------------------------
         * TYPESCRIPT FILES (COMPONENTS, SERVICES ETC) (.ts)
         * -----------------------------------------------------
         */
        {
            "files": ["*.ts"],
            "parserOptions": {
                "project": ["tsconfig.*?.json", "e2e/tsconfig.json"],
                "createDefaultProgram": true
            },
            "extends": ["plugin:@angular-eslint/recommended"],
            "rules": {
                /**
                 * Any TypeScript related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 *
                 * There are some examples below from the @angular-eslint plugin and ESLint core:
                 */
                "@angular-eslint/directive-selector": [
                    "error",
                    {
                        "type": "attribute",
                        "prefix": "app",
                        "style": "camelCase"
                    }
                ],
                "@angular-eslint/component-selector": [
                    "error",
                    {
                        "type": "element",
                        "prefix": "app",
                        "style": "kebab-case"
                    }
                ],
                "quotes": ["error", "single", { "allowTemplateLiterals": true }]
            }
        },

        /**
         * -----------------------------------------------------
         * COMPONENT TEMPLATES
         * -----------------------------------------------------
         *
         * If you use inline templates, make sure you read the notes on the configuration
         * object after this one to understand how they relate to this configuration directly
         * below.
         */
        {
            "files": ["*.component.html"],
            "extends": ["plugin:@angular-eslint/template/recommended"],
            "rules": {
                /**
                 * Any template/HTML related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 *
                 * There is an example below from ESLint core (note, this specific example is not
                 * necessarily recommended for all projects):
                 */
                "max-len": ["error", { "code": 140 }]
            }
        },

        /**
         * -----------------------------------------------------
         * EXTRACT INLINE TEMPLATES (from within .component.ts)
         * -----------------------------------------------------
         *
         * This extra piece of configuration is necessary to extract inline
         * templates from within Component metadata, e.g.:
         *
         * @Component({
         *  template: `<h1>Hello, World!</h1>`
         * })
         * ...
         *
         * It works by extracting the template part of the file and treating it as
         * if it were a full .html file, and it will therefore match the configuration
         * specific for *.component.html above when it comes to actual rules etc.
         *
         * NOTE: This processor will skip a lot of work when it runs if you don't use
         * inline templates in your projects currently, so there is no great benefit
         * in removing it, but you can if you want to.
         *
         * You won't specify any rules here. As noted above, the rules that are relevant
         * to inline templates are the same as the ones defined for *.component.html.
         */
        {
            "files": ["*.component.ts"],
            "extends": [
                "plugin:@angular-eslint/template/process-inline-templates"
            ]
        }
    ],
    "env": {
        "browser": true,
        "es6": true,
        "node": true
    },
    "extends": ["prettier", "prettier/@typescript-eslint"],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 12,
        "sourceType": "module",
        "project": "tsconfig.json"
    },
    "plugins": ["@typescript-eslint", "@typescript-eslint/tslint"],
    "rules": {
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/directive-class-suffix": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-member-accessibility": [
            "off",
            {
                "accessibility": "explicit"
            }
        ],
        "@typescript-eslint/indent": "warn",
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "semi",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                }
            }
        ],
        "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/naming-convention": "error",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-inferrable-types": [
            "error",
            {
                "ignoreParameters": true
            }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/quotes": ["error", "single"],
        "@typescript-eslint/semi": ["error", "always"],
        "@typescript-eslint/tslint/config": [
            "error",
            {
                "rules": {
                    "import-spacing": true,
                    "use-host-property-decorator": true,
                    "use-input-property-decorator": true,
                    "use-life-cycle-interface": true,
                    "use-output-property-decorator": true,
                    "whitespace": true
                }
            }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "brace-style": ["error", "1tbs"],
        "constructor-super": "error",
        "curly": "error",
        "eol-last": "error",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "id-blacklist": "off",
        "id-match": "off",
        "import/no-deprecated": "warn",
        "jsdoc/no-types": "error",
        "comma-dangle": 0,
        "indent": "warn",
        "max-len": [
            "error",
            {
                "code": 200
            }
        ],
        "no-bitwise": "error",
        "no-caller": "error",
        "no-console": [
            "error",
            {
                "allow": [
                    "log",
                    "dirxml",
                    "warn",
                    "error",
                    "dir",
                    "timeLog",
                    "assert",
                    "clear",
                    "count",
                    "countReset",
                    "group",
                    "groupCollapsed",
                    "groupEnd",
                    "table",
                    "Console",
                    "markTimeline",
                    "profile",
                    "profileEnd",
                    "timeline",
                    "timelineEnd",
                    "timeStamp",
                    "context"
                ]
            }
        ],
        "no-debugger": "error",
        "no-empty": "off",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-new-wrappers": "error",
        "no-restricted-imports": ["error", "rxjs/Rx"],
        "no-shadow": [
            "error",
            {
                "hoist": "all"
            }
        ],
        "no-throw-literal": "error",
        "no-trailing-spaces": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-unused-labels": "error",
        "no-var": "error",
        "prefer-const": "error",
        "radix": "error",
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": ["/"]
            }
        ]
    }
}
